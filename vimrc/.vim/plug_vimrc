"from ~/.vimrc "

call plug#begin('~/.vim/bundle') "Начать искать плагины в этой директории
"Тут будут описаны наши плагины"

Plug 'axiaoxin/vim-json-line-format', {'for': 'json'}
Plug 'kien/rainbow_parentheses.vim' "Разноцветные скобки
Plug 'jiangmiao/auto-pairs'     "Автозакрытие скобок
Plug 'dense-analysis/ale'
"Plug 'neomake/neomake'          "Для работы шел чека
"Plug 'Valloric/YouCompleteMe'   "Подстановка команд/переменых
Plug 'preservim/nerdtree'       "Файловый менеджер

call plug#end()

"rainbow_parentheses.vim --------------------
"Разноцветные скобки

"if filereadable(expand("~/.vim/plug_vimrc"))
"    source ~/.vim/bundle
"endif

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound    " (), the default when toggling
au Syntax * RainbowParenthesesLoadSquare   " []
au Syntax *  RainbowParenthesesLoadBraces   " {}
au Syntax *  RainbowParenthesesLoadChevrons " <>
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" auto-pairs -------------------------------
" <!-- -->, <% %>, """ """

let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutBackInsert = '<M-b>'


" ALE-------------------------------------
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'python': ['pylint', 'flake8'],
\   'c': ['gcc', 'cppcheck'],
\   'cpp': ['gcc', 'cppcheck'],
\   'go': ['gofmt', 'golint'],
\   'vimwiki': ['markdownlint'],
\   'markdown': ['markdownlint'],
\ }
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'python': ['yapf', 'isort'],
\ 'html': ['prettier'],
\ 'vimwiki': ['prettier'],
\ 'markdown': ['prettier'],
\ }
let g:ale_fix_on_save = 1

" NEOMAKE ------------------------------
"let g:neomake_open_list = 1
" When writing a buffer (no delay).
"call neomake#configure#automake('w')
" When writing a buffer (no delay), and on normal mode changes (after 750ms).
"call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing (no delay).
"call neomake#configure#automake('rw', 1000)
" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 500ms; no delay when writing).
"call neomake#configure#automake('nrwi', 500)

"function! MyOnBattery()
"  if has('macunix')
"    return match(system('pmset -g batt'), "Now drawing from 'Battery Power'") != -1
"  elseif has('unix')
"    return readfile('/sys/class/power_supply/AC/online') == ['0']
"  endif
"  return 0
"endfunction
"
"if MyOnBattery()
"  call neomake#configure#automake('w')
"else
"  call neomake#configure#automake('nw', 1000)
"endif


" YouCompleteMe
"
"cd ~/.vim/bundle/YouCompleteMe
"python install.py --all
let g:ycm_show_diagnostics_ui = 0 "Обрубаем YCM

"set completeopt=menu,menuone
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_show_diagnostics_ui = 1
"let g:ycm_server_log_level = 'info'
"let g:ycm_min_num_identifier_candidate_chars = 2
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_complete_in_strings=1
"let g:ycm_key_invoke_completion = '<c-z>'
"noremap <c-z> <NOP>
"let g:ycm_semantic_triggers =  {
"\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
"\ 'cs,lua,javascript': ['re!\w{2}'],
"\ }
"let g:ycm_filetype_whitelist = {
"\ "c":1,
"\ "cpp":1,
"\ "go":1,
"\ "python":1,
"\ "java":1,
"\ "javascript":1,
"\ "perl":1,
"\ "lua":1,
"\ "sh":1,
"\ "zsh":1,
"\ }
"autocmd FileType python nmap gd :YcmCompleter GoToDefinitionElseDeclaration<cr>

" NERDTree -----------------------------

" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']
let NERDTreeShowHidden=1


" Enable folder icons
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" Fix directory colors
highlight! link NERDTreeFlags NERDTreeDir

" Remove expandable arrow
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"
let NERDTreeNodeDelimiter = "\x07"

" Autorefresh on tree focus
function! NERDTreeRefresh()
    if &filetype == "nerdtree"h
        silent exe substitute(mapcheck("R"), "<CR>", "", "")
    endif
endfunction

"autocmd BufEnter * call NERDTreeRefresh()
"autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

